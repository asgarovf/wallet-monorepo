import {
  authenticate,
  register,
  verifySignatureOnChain,
} from "@/utils/webauthn";
import {
  AuthenticationEncoded,
  RegistrationEncoded,
} from "@passwordless-id/webauthn/dist/esm/types";
import { ethers } from "ethers";
import Head from "next/head";
import { useState } from "react";

const challenge = "0x94E9b636d0f3BDc08019B450F7f2F4Ef5b4eb2Ca";
const base64toBase64Url = (txt: string) => {
  return txt.replaceAll("+", "-").replaceAll("/", "_");
};

const encodeChallenge = (challenge: string) => {
  const sliced = challenge.slice(2);
  const split = base64toBase64Url(
    Buffer.from(sliced, "hex").toString("base64")
  ).replaceAll("=", "A");
  // let joined = "";
  // split.forEach((item) => {
  //   if (item != "=") {
  //     joined += item;
  //   }
  // });
  return split;
};

// console.log(encodeChallenge(challenge));

const encodedChallenge = encodeChallenge(challenge);

console.log(encodedChallenge);

export default function Home() {
  const [display, setDisplay] = useState("");

  const [registrationResponse, setRegistrationResponse] =
    useState<RegistrationEncoded | null>(null);

  const [authenticationResponse, setAuthenticationResponse] =
    useState<AuthenticationEncoded | null>(null);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <div>
          <div>
            <button
              onClick={async () => {
                const registrationResponse = await register(encodedChallenge);
                console.log(registrationResponse);
                setRegistrationResponse(registrationResponse);
                setDisplay(JSON.stringify(registrationResponse));
              }}
            >
              Register
            </button>
          </div>
          <div>
            <button>Verify Registration</button>
          </div>
          <div
            onClick={async () => {
              if (registrationResponse == null) {
                alert("Invalid registration");
                return;
              }
              const res = await authenticate(
                registrationResponse.credential.id,
                encodedChallenge
              );

              setAuthenticationResponse(res);
              setDisplay(JSON.stringify(res));
            }}
          >
            <button>Authenticate</button>
          </div>
          <div>
            <button
              onClick={async () => {
                if (registrationResponse == null) {
                  alert("Invalid registration");
                  return;
                }

                if (authenticationResponse == null) {
                  alert("Invalid authentication");
                  return;
                }

                const res = await verifySignatureOnChain(
                  challenge,
                  registrationResponse.credential.publicKey,
                  encodedChallenge,
                  authenticationResponse.signature,
                  authenticationResponse.authenticatorData,
                  authenticationResponse.clientData
                );

                console.log(res);
              }}
            >
              Verify Signature
            </button>
          </div>

          <div style={{ marginTop: "24px" }}>{display}</div>
          <div>
            Raw public key: {registrationResponse?.credential.publicKey}
          </div>
        </div>
      </main>
    </>
  );
}
